function ccm_neuron_choice_pop(subject,projectRoot,projectDate, options)
%
% Create a table (using stats from all sessions) of sessions with neurons, classifying the neurons w.r.t different epochs:
% Stim, Sacc, Post, Reward
%
%
dataPath = fullfile(projectRoot,'data',projectDate,subject);

fileName = 'ccm_neuronTypes';
if options.multiUnit
    fileName = [fileName, '_multiUnit'];
end

original = load(fullfile(dataPath, fileName));

sessionID = original.neuronTypes.sessionID;
unit = original.neuronTypes.unit;
rf = original.neuronTypes.rf;
hemisphere = original.neuronTypes.hemisphere;

% Either append the data to an extant file, or create a new table and start
% from the beginning
if options.append
    %     load(fullfile(dataPath, 'ccm_ding_gold_neuronTypes'), 'neuronTypes')
    %
    %     % Figure out last unit being processed/saved
    %     lastSession = neuronTypes.sessionID(end);
    %     lastUnit = neuronTypes.unit(end);
    %     startInd = 1 + find(strcmp(original.neuronTypes.sesssionID, lastSession) & strcmp(original.neuronTypes.unit, lastUnit));
else
    stimTypes = cell(size(unit, 1), 12);
    %     saccTypes = cell(size(unit, 1), 12);
    %     postTypes = cell(size(unit, 1), 12);
    %     rewardTypes = cell(size(unit, 1), 12);
    startInd = 1;
    %     startUnit = 1;
end


opt                 = ccm_options;
opt.doStops         = false;
opt.plotFlag        = true;
opt.printPlot       = true;


% Loop through the sessions and add the data to the table.
poolID = parpool(options.parpoolSize);
parfor i = startInd : size(original.neuronTypes, 1)
    % for i = startInd : size(original.neuronTypes, 1)
    
    
    fprintf('%02d\t%s\t%s\n',i,sessionID{i}, unit{i})
    
    %     iUnit = [sessionID(i), unit(i)];
    %     iData               = ccm_session_data(subject, iUnit, opt);
    %     iData.rf       = rf{i};
    
    %     iData.epoch = 'Stim';
    iData           = ccm_neuron_choice(subject, sessionID{i}, unit(i), options);
    
    
    iCCell = {sessionID(i), ...
        unit(i), ...
        hemisphere(i), ...
        {iData.rf}, ...
        iData.choiceDependent, ...
        iData.coherenceDependent, ...
        iData.ddmLike, ...
        iData.tChoice, ...
        iData.choiceSelectionTime, ...
        iData.leftIsIn, ...
        iData.coeffIn, ...
        iData.coeffOut};
    
    
    stimTypes(i,:) = iCCell;
    
    %     iData.epoch = 'Sacc';
    %     iSacc           = ccm_classify_neuron_ding_gold(iData);
    %     saccTypes(i,:) = iSacc;
    %
    %     iData.epoch = 'Post';
    %     iPost           = ccm_classify_neuron_ding_gold(iData);
    %     postTypes(i,:) = iPost;
    
    %     iData.epoch = 'Reward';
    %     iRew           = ccm_classify_neuron_ding_gold(iData);
    %     rewardTypes(i,:) = iRew;
    
end
delete(poolID)

neuronTypes = cell2table(stimTypes, 'VariableNames',...
    {'sessionID'...
    'unit'...
    'hemisphere'...
    'rf'...
    'choice'...
    'coherence'...
    'ddm'...
    'tChoice'...
    'choiceSelectionTime'...
    'leftIsIn'...
    'coeffIn'...
    'coeffOut'});

if options.multiUnit
    save(fullfile(dataPath, 'ccm_ddmStim_neuronTypes_multiUnit'), 'neuronTypes')
else
    save(fullfile(dataPath, 'ccm_ddmStim_neuronTypes'), 'neuronTypes')
end

% neuronTypes = cell2table(saccTypes, 'VariableNames',...
%     {'sessionID'...
%     'unit'...
%     'hemisphere'...
%     'rf'...
%     'epoch'...
%     'choice'...
%     'coherence'...
%     'ddm'...
%     'tChoice'...
%     'leftIsIn'...
%     'coeffIn'...
%     'coeffOut'});
%
% save(fullfile(dataPath, 'ccm_ddmSacc_neuronTypes'), 'neuronTypes')
%
% neuronTypes = cell2table(postTypes, 'VariableNames',...
%     {'sessionID'...
%     'unit'...
%     'hemisphere'...
%     'rf'...
%     'epoch'...
%     'choice'...
%     'coherence'...
%     'ddm'...
%     'tChoice'...
%     'leftIsIn'...
%     'coeffIn'...
%     'coeffOut'});
%
% save(fullfile(dataPath, 'ccm_ddmPost_neuronTypes'), 'neuronTypes')

% neuronTypes = cell2table(rewardTypes, 'VariableNames',...
%     {'sessionID'...
%     'unit'...
%     'hemisphere'...
%     'rf'...
%     'epoch'...
%     'choice'...
%     'coherence'...
%     'ddm'...
%     'tChoice'...
%     'leftIsIn'...
%     'coeffIn'...
%     'coeffOut'});
%
% save(fullfile(dataPath, 'ccm_ddmReward_neuronTypes'), 'neuronTypes')
